/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//========================
// CONTROLS

// number of cells
Nx   40;
NRinner   11;
NRouter   25;

// size ratio of cell at the wall to the free-stream one in the near-wall blocks
expRatWall   1; // for BL
expRatWall2   0.1; // pipe-axis direction

//========================

convertToMeters 0.001;


vertices
(
    (0.0 0.0 0.0) 			//0
    (0.0 0.0 6.48) 			//1
    (0.0 0.0 7.0) 			//2
    (0.0 4.582052 4.582052) //3
    (0.0 6.48 0.0) 			//4
    (0.0 7.0 0.0) 			//5
    (0.0 4.949747 4.949747) //6
    (1.0 0.0 0.0)			//7
    (1.0 0.0 6.48) 			//8
    (1.0 0.0 7.0) 			//9
    (1.0 4.582052 4.582052) //10
    (1.0 6.48 0.0) 			//11
    (1.0 7.0 0.0) 			//12
    (1.0 4.949747 4.949747) //13
	
	(0.0 0.0 0.419)			//14
	(0.0 0.296278 0.296278)	//15
	(0.0 0.419 0.0)			//16
	(1.0 0.0 0.419)			//17
	(1.0 0.296278 0.296278)	//18
	(1.0 0.419 0.0)			//19
	
	(0.0 0.0 0.209)			//20
	(0.0 0.147785 0.147785)	//21
	(0.0 0.209 0.0)			//22
	(1.0 0.0 0.209)			//23
	(1.0 0.147785 0.147785)	//24
	(1.0 0.209 0.0)			//25
);

blocks //der mittlere Wert der ersten Klammer bestimmt die Zellenanzahl in Kreisrichtung
(
    hex (4 11 12 5 3 10 13 6) ($Nx 8 $NRinner) simpleGrading ($expRatWall2 1.25 1) // 0 - außen links
    hex (3 10 13 6 1 8 9 2) ($Nx 8 $NRinner) simpleGrading ($expRatWall2 1.25 1) // 1 - außen rechts
	
	//hex (0 7 19 16 14 17 18 15) ($Nx $NRinner $NRinner) simpleGrading ($expRatWall2 1 1) // 2 - Zentrum
	
	hex (16 19 11 4 15 18 10 3) ($Nx 90 $NRinner) simpleGrading ($expRatWall2 $expRatWall 1) // 2 - Heizfläche links
	hex (15 18 10 3 14 17 8 1) ($Nx 90 $NRinner) simpleGrading ($expRatWall2 $expRatWall 1) // 3 - Heizfläche rechts
	
	hex (0 7 25 22 20 23 24 21) ( $Nx $NRinner $NRinner) simpleGrading ($expRatWall2 1 1) // 4 - Zentrum
	
	hex (22 25 19 16 21 24 18 15) ($Nx $NRinner $NRinner) simpleGrading ($expRatWall2 1 1) // 5 - Düse links
	hex (21 24 18 15 20 23 17 14) ($Nx $NRinner $NRinner) simpleGrading ($expRatWall2 1 1) // 6 - Düse rechts
	
	
);

edges
(

    arc 2 6 (0 2.678784 6.467157)
    arc 6 5 (0 6.467157 2.678784)
	
    arc 9 13 (1.0 2.678784 6.467157)
    arc 13 12 (1.0 6.467157 2.678784) // äußerer Rand
	
	
	arc 14 15 (0 0.160344 0.387106)
	arc 15 16 (0 0.387106 0.160344)

	arc 17 18 (1.0 0.160344 0.387106)
	arc 18 19 (1.0 0.387106 0.160344) //innerer Rand
	
	
	arc 1 3 (0 2.479789 5.986739)
	arc 3 4 (0 5.986739 2.479789)

	arc 8 10 (1.0 2.479789 5.986739)
	arc 10 11 (1.0 5.986739 2.479789) // mittlerer Rand
	
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
			(0 20 21 22)	//Zentrum
			(22 16 15 21)	//Düse links
			(15 14 20 21)	//Düse rechts
        );
    }
    heatedSurface
    {
        type wall;
        faces
        (
			(25 24 23 7)	// Düse Zentrum
			(19 18 24 25)	// Düse links
			(18 17 23 24)	// Düse rechts
			(11 10 18 19)	// Rand links
			(10 8 17 18)	// Rand rechts
        );
    }
	atmosphere
	{
		type patch;
		faces
		(
            (1 2 6 3) 		// außen rechts
            (3 6 5 4) 		// außen links
			(14 1 3 15) 	// mitte rechts
			(15 3 4 16) 	// mitte links
            (9 13 6 2)		// Rand rechts
            (13 12 5 6)		// Rand links
            (12 13 10 11)	// außen links
            (13 9 8 10)		// außen rechts
		);
	}		
    symmetryVer
    {
        type cyclicAMI;
		neighbourPatch symmetryHor;
		transform       rotational;
        rotationAxis    (1 0 0);
        rotationCentre  (0 0 0);
        faces
        (
            (2 9 8 1)
            (1 8 17 14)
			(14 17 23 20)
			(20 23 7 0)
        );
    }
    symmetryHor
    {
        type cyclicAMI;
		neighbourPatch symmetryVer;
        transform       rotational;
        rotationAxis    (1 0 0);
        rotationCentre  (0 0 0);
        faces
        (
            (11 4 16 19)
            (12 5 4 11)
			(19 16 22 25)
			(25 22 0 7)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //

