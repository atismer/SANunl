/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solvers
{
    "alpha.water.*"
    {
        nAlphaCorr      1; // nAlphaCorr is just read but never used.
        nAlphaSubCycles 5; // nAlphaSubCycles represents the number of sub-cycles within the α equation;
                           // sub-cycles are additional solutions to an equation within a given time step.
                           // It is used to enable the solution to be stable without reducing the time step
                           // and vastly increasing the solution time. Here we specify 2 sub-cycles,
                           // which means that the α equation is solved in 2× half length time steps
                           // within each actual time step.
        cAlpha          1; // The cAlpha keyword is a factor that controls the compression of the interface
                           // where: 0 corresponds to no compression; 1 corresponds to conservative compression;
                           // and, anything larger than 1, relates to enhanced compression of the interface.
                           // We generally adopt a value of 1.0 which is employed in this example.
        // MULESCorr       yes;      // Switches on semi-implicit MULES
        // nLimiterIter    8;        // Number of MULES iterations over the limiter
        // alphaApplyPrevCorr  true;

        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-8;
        relTol          0;
    }

    "pcorr.*"
    {
        solver          PCG;
        //preconditioner  DIC;
         preconditioner
         {
             preconditioner  GAMG;
             tolerance       1e-05;
             relTol          0;
             smoother        DICGaussSeidel;
         }
        tolerance       1e-10;
        relTol          0;
    }

    p_rgh
    {
        solver          PCG;
        preconditioner  DIC;
        tolerance       1E-4;
        relTol          0.001;
        maxIter         100;
    }

    p_rghFinal
    {
        $p_rgh;
        tolerance       1E-5;
        relTol          0.0001;
        maxIter         100;
    }

    "rho.*"
    {
        solver           GAMG;
        smoother         GaussSeidel;
        tolerance        0.0001;
        relTol           0.0001;
        // maxIter          10;
    }
    "rhoFinal.*"
    {
        solver           GAMG;
        smoother         GaussSeidel;
        tolerance        0.0001;
        relTol           0;
        // maxIter          20;
    }

    U
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-4;
        relTol          0.001;
        maxIter          2000;
    }
    UFinal
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-5;
        relTol          0;
    }

    T
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-05;
        relTol          0.001;
    }
    TFinal
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-06;
        relTol          0;
    }

    k
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-05;
        relTol          0.001;
    }
    kFinal
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-06;
        relTol          0;
    }

    epsilon
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-05;
        relTol          0.001;
    }
    epsilonFinal
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-06;
        relTol          0;
    }
}

PIMPLE
{
    momentumPredictor yes;
    nOuterCorrectors         1;
    nCorrectors              2;
    nNonOrthogonalCorrectors 1;
}
relaxationFactors
{
    fields
    {
        p 0.3;
    }
    equations
    {
        U 0.4;
    }
}
// ************************************************************************* //
